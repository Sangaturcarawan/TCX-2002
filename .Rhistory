set.seed(123)
complaint_times <- rgamma(100, shape = 2, scale = 5)
complaint_times
head(complaint_times)
mean(complaint_times)
sd(complaint_times)
plot(complaint_times)
barplot(complaint_times)
hist(complaint_times)
pie(complaint_times)
hist(complaint_times, main = "Complaint Resolution Times", xlab = "Time (hours)")
hist(complaint_times, breaks = 30, main = "Complaint Resolution Times", xlab = "Time (hours)")
plot(complaint_times)
barplot(complaint_times)
hist(complaint_times)
complaint_times
summary(complaint_times)
plot(complaint_times)
barplot(complaint_times)
hist(complaint_times)
plot(complaint_times)
barplot(complaint_times)
hist(complaint_times)
hist(complaint_times, main = "Complaint Resolution Times", xlab = "Time (hours)")
hist(complaint_times, breaks = 30, main = "Complaint Resolution Times", xlab = "Time (hours)")
mean_time <- mean(complaint)
mean_time <- mean(complaint_times)
sd_time <- sd(complaint_times)
cat("Mean resolution time:", round(mean_time, 2), "hours\n")
cat("Standard deviation:", round(sd_time, 2), "hours\n")
n <- length(complaint_times)
# 3. Compute a 95% confidence interval for average resolution time.
mean_time
sd_time
n
std_error <- sd_time/sqrt(n)
std_error
qnorm(0.975)
confidence_int_lower <- mean(complaint_times) - qnorm(0.975) * sd(complaint_times) / sqrt(length(complaint_times))
confidence_int_lower
qnorm(0.95)
margin_error <- qnorm()
qnorm(0.975)
qnorm(0.95)
margin_error <- qnorm(1 - alpha_sig_lvl/2)
z-value <- qnorm(1 - alpha_sig_lvl/2)
confidence_ints <- mean(complaint_times) + c(-1,1) * qnorm(0.975) * sd(complaint_times) / sqrt(length(complaint_times))
confidence_ints
# Set a seed for reproducibility
set.seed(123)
# Create a dummy dataset of 100 complaint resolution times (in hours)
# We use a distribution that is skewed to the right (more common in real data)
complaint_times <- rgamma(100, shape = 2, scale = 5)
# Display the first few entries of the dataset & simple visual
head(complaint_times)
plot(complaint_times)
barplot(complaint_times)
hist(complaint_times) # Best
pie(complaint_times)
# Visualize the distribution of the data
hist(complaint_times, main = "Complaint Resolution Times", xlab = "Time (hours)")
hist(complaint_times, breaks = 30, main = "Complaint Resolution Times", xlab = "Time (hours)")
### Calculate the mean (average) resolution time ###
mean_time <- mean(complaint_times)
# Calculate the standard deviation
sd_time <- sd(complaint_times)
# Print the results
cat("Mean resolution time:", round(mean_time, 2), "hours\n")
cat("Standard deviation:", round(sd_time, 2), "hours\n")
### Compute a 95% Confidence Interval ###
# Sample size (100)
n <- length(complaint_times)
# Z-score for a 95% confidence interval
z_score <- 1.96
# Calculate the standard error of the mean
standard_error <- sd_time / sqrt(n)
# Calculate the margin of error
margin_of_error <- z_score * standard_error
# Calculate the confidence interval bounds
lower_bound <- mean_time - margin_of_error
upper_bound <- mean_time + margin_of_error
# Print the confidence interval
cat("95% Confidence Interval of mean resolution time: [", round(lower_bound, 2), ", ", round(upper_bound, 2), "] hours\n")
confidence_ints <- mean(complaint_times) + c(-1,1) * qnorm(0.975) * sd(complaint_times) / sqrt(length(complaint_times))
confidence_ints
# Scenario: An e-commerce site tracks conversion rates. In 1,200 visitors:
#   • 84 made purchases • Sample conversion rate: p̂= 84/1,200 = 7%
# Lab Questions:
#   1. Check if conditions are met for normal approximation
x <- 84
n <- 1200
p_hat <- x/n
p_hat
# Scenario: An e-commerce site tracks conversion rates. In 1,200 visitors:
#   • 84 made purchases • Sample conversion rate: p̂= 84/1,200 = 7%
# Lab Questions:
#   1. Check if conditions are met for normal approximation
x <- 84
n <- 1200
p_hat <- x/n
p_hat
np <- n * p_hat
nq <- n * (1-p_hat)
normal_ok <- (np >= 10) && (nq >= 10)
normal_ok
std_err <- sqrt(p_hat * (1-p_hat) / n)
# 3. Build 95% confidence interval for true conversion rate
z_value <- qnorm(0.975)
# 2. Calculate standard error for the proportion
std_err <- sqrt(p_hat * (1-p_hat) / n)
# 3. Build 95% confidence interval for true conversion rate
z_value <- qnorm(0.975)
intervals <- p_hat + c(-1,1) * z_value * std_err
intervals
round(intervals,2)
intervals
p_hat
