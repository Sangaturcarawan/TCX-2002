plot(complaint_times)
barplot(complaint_times)
hist(complaint_times) # Best
pie(complaint_times)
# Visualize the distribution of the data
hist(complaint_times, main = "Complaint Resolution Times", xlab = "Time (hours)")
hist(complaint_times, breaks = 30, main = "Complaint Resolution Times", xlab = "Time (hours)")
### Calculate the mean (average) resolution time ###
mean_time <- mean(complaint_times)
# Calculate the standard deviation
sd_time <- sd(complaint_times)
# Print the results
cat("Mean resolution time:", round(mean_time, 2), "hours\n")
cat("Standard deviation:", round(sd_time, 2), "hours\n")
### Compute a 95% Confidence Interval ###
# Sample size (100)
n <- length(complaint_times)
# Z-score for a 95% confidence interval
z_score <- 1.96
# Calculate the standard error of the mean
standard_error <- sd_time / sqrt(n)
# Calculate the margin of error
margin_of_error <- z_score * standard_error
# Calculate the confidence interval bounds
lower_bound <- mean_time - margin_of_error
upper_bound <- mean_time + margin_of_error
# Print the confidence interval
cat("95% Confidence Interval of mean resolution time: [", round(lower_bound, 2), ", ", round(upper_bound, 2), "] hours\n")
confidence_ints <- mean(complaint_times) + c(-1,1) * qnorm(0.975) * sd(complaint_times) / sqrt(length(complaint_times))
confidence_ints
# Scenario: An e-commerce site tracks conversion rates. In 1,200 visitors:
#   • 84 made purchases • Sample conversion rate: p̂= 84/1,200 = 7%
# Lab Questions:
#   1. Check if conditions are met for normal approximation
x <- 84
n <- 1200
p_hat <- x/n
p_hat
# Scenario: An e-commerce site tracks conversion rates. In 1,200 visitors:
#   • 84 made purchases • Sample conversion rate: p̂= 84/1,200 = 7%
# Lab Questions:
#   1. Check if conditions are met for normal approximation
x <- 84
n <- 1200
p_hat <- x/n
p_hat
np <- n * p_hat
nq <- n * (1-p_hat)
normal_ok <- (np >= 10) && (nq >= 10)
normal_ok
std_err <- sqrt(p_hat * (1-p_hat) / n)
# 3. Build 95% confidence interval for true conversion rate
z_value <- qnorm(0.975)
# 2. Calculate standard error for the proportion
std_err <- sqrt(p_hat * (1-p_hat) / n)
# 3. Build 95% confidence interval for true conversion rate
z_value <- qnorm(0.975)
intervals <- p_hat + c(-1,1) * z_value * std_err
intervals
round(intervals,2)
intervals
p_hat
library(tidyverse)
library(dplyr)
library(lubridate)
library(moments)
library(car)
# 1. One-Sample t-test
# Scenario: A coffee chain claims that its average daily sales is $500, in the past month. You
# are asked to verify this.
# Dataset:
# A vector of 30 daily sales figures:
sales <- c(595, 447, 477, 423, 570, 547, 541, 490, 593, 557, 533, 482, 516, 590,
476, 499, 419, 509, 430, 479, 502, 511, 496, 471, 554, 596, 485, 534, 414, 443)
# 2. Paired Sample t-test
# Scenario: A 10-day marketing campaign was launched. You want to test whether customer
# online visits to the online shop increased during the campaign vs the 10 days before.
before <- c(125, 153, 148, 113, 139, 123, 106, 146, 119, 172)
mean_sales <- mean(sales)
mean_sales
source("~/TCX-2002/TCX_Tutorial_2.R")
?t.test
t.test(sales, mu=500)
length(sales)
df(sales)
before <- c(125, 153, 148, 113, 139, 123, 106, 146, 119, 172)
after <- c(140, 165, 154, 122, 148, 194, 164, 152, 200, 197)
before <- c(125, 153, 148, 113, 139, 123, 106, 146, 119, 172)
after <- c(140, 165, 154, 122, 148, 194, 164, 152, 200, 197)
?t.test
t.test(before, after, paired=TRUE, alternative="greater")
t.test(before, after, paired=TRUE)
t.test(before, after, paired=TRUE)
# Normality for each group
# Shapiro–Wilk per group => ensures t-test's normality assumption is reasonable.
shapiro.test(before)
shapiro.test(after)
shapiro.test(before)
shapiro.test(after)
t.test(before, after, paired=TRUE)
?aov()
branch <- factor(c(rep("North",4), rep("South",4), rep("Central",4)))
score <- c(3.2, 3.5, 3.7, 3.2, 4.0, 4.2, 3.9, 3.6, 3.7, 3.6, 3.4, 3.9)
branch
score
aov(score ~ branch)
aovmodel <- aov(score ~ branch)
aovmodel
summary(aovmodel)
boxplot(score ~ branch,
main = "Scores by Branch",
ylab = "Score",
boxplot(score ~ branch, main = "Scores by Branch", xlab = "Branch", ylab = "Score", col = c("lightblue", "lightgreen", "lightpink")
boxplot(score ~ branch, main = "Scores by Branch", xlab = "Branch", ylab = "Score", col = c("lightblue", "lightgreen", "lightpink")
boxplot(score ~ branch,
main = "Scores by Branch",
xlab = "Branch",
ylab = "Score",
col = c("lightblue", "lightgreen", "lightpink"))
points(tapply(score, branch, mean), col="red", pch=19)
diet <- factor(rep(c("A", "B", "C"), each = 5))
loss <- c(2.1, 2.5, 2.0, 2.9, 2.4, # Diet A
3.0, 3.2, 2.8, 3.5, 3.1, # Diet B
1.8, 2.0, 2.2, 1.9, 2.1) # Diet C
modelaov <- aov(loss ~ diet)
modelaov
summary(modelaov)
# Boxplot of weight loss by diet
boxplot(loss ~ diet,
main = "Weight Loss by Diet Plan",
xlab = "Diet Plan",
ylab = "Weight Loss (kg)",
col = c("lightblue", "lightgreen", "lightpink"))
# Add mean points in red
points(tapply(loss, diet, mean), col="red", pch=19)
before <- c(8, 6, 7, 9, 10, 5, 8, 7, 6, 9)
after <- c(5, 4, 5, 6, 8, 3, 6, 5, 4, 6)
t.test(before, after, paired=TRUE, alternative="greater")
set.seed(123)
# 36 months: 2022-01 to 2024-12
months <- seq(as.Date("2022-01-01"), as.Date("2024-12-01"), by = "month")
n <- length(months)
# Simple features
Holidays <- ifelse(format(months, "%m") %in% c("01","02","06","11","12"), 1, 0)  # SG retail-heavy months
Marketing_Spend <- 30000 + 400*(1:n) + 8000*Holidays + rnorm(n, 0, 3000)
Tourist_Arrivals <- 600 + 20*(1:n) + 80*sin(2*pi*(1:n)/12) + rnorm(n, 0, 40)     # in thousands
# Generate Sales with a simple linear relationship + noise
Sales <- 150000 + 1.8*Marketing_Spend + 220*Tourist_Arrivals + 40000*Holidays + rnorm(n, 0, 20000)
df <- data.frame(
Month = months,
Sales,
Marketing_Spend,
Tourist_Arrivals,
Holidays = factor(Holidays) # as factor for easy interpretation
)
head(df)
train <- subset(df, Month < as.Date("2024-01-01"))
test  <- subset(df, format(Month, "%Y") == "2024")
nrow(train); nrow(test)
# Simple LR: Sales ~ Marketing_Spend
m_lr <- lm(Sales ~ Marketing_Spend, data = train)
summary(m_lr)
# Multiple LR: add Tourist_Arrivals and Holidays
m_mlr <- lm(Sales ~ Marketing_Spend + Tourist_Arrivals + Holidays, data = train)
summary(m_mlr)
rmse <- function(a,b) sqrt(mean((a-b)^2))
pred_train_lr  <- predict(m_lr,  train)
pred_train_mlr <- predict(m_mlr, train)
pred_test_lr   <- predict(m_lr,  test)
pred_test_mlr  <- predict(m_mlr, test)
cat("Train RMSE (LR): ", rmse(train$Sales, pred_train_lr),  "\n")
cat("Train RMSE (MLR):", rmse(train$Sales, pred_train_mlr), "\n")
cat("Test RMSE (LR):  ", rmse(test$Sales,  pred_test_lr),   "\n")
cat("Test RMSE (MLR): ", rmse(test$Sales,  pred_test_mlr),  "\n")
num <- subset(train, select = c(Sales, Marketing_Spend, Tourist_Arrivals))
round(cor(num), 2)
# install.packages("car") # run once if needed
library(car)
vif(m_mlr)
par(mfrow=c(2,2))
plot(m_mlr)   # Residuals vs Fitted, QQ plot, Scale-Location, Residuals vs Leverage
par(mfrow=c(1,1))
# install.packages("car") # run once if needed
library(car)
vif(m_mlr)
par(mfrow=c(2,2))
plot(m_mlr)   # Residuals vs Fitted, QQ plot, Scale-Location, Residuals vs Leverage
par(mfrow=c(1,1))
# Sales vs Marketing Spend
p1 <- ggplot(df, aes(x = Marketing_Spend, y = Sales)) +
geom_point(color = "red") +
ggtitle("Sales vs. Marketing Spend") +
theme_minimal() +
theme(
panel.grid.major = element_line(color = "lightgray", linetype = "dotted"),
panel.grid.minor = element_line(color = "lightgray", linetype = "dotted")
)
# Combine the two plots side by side
grid.arrange(p1, p2, ncol = 2)
# 1. Explore the data
# Scenario: Use the same data from Tutorial 3.
# Create scatterplot for “Sales vs Marketing Spend” & “Sales vs Tourists”.
library(ggplot2)
# Sales vs Marketing Spend
p1 <- ggplot(df, aes(x = Marketing_Spend, y = Sales)) +
geom_point(color = "red") +
ggtitle("Sales vs. Marketing Spend") +
theme_minimal() +
theme(
panel.grid.major = element_line(color = "lightgray", linetype = "dotted"),
panel.grid.minor = element_line(color = "lightgray", linetype = "dotted")
)
# Combine the two plots side by side
grid.arrange(p1, p2, ncol = 2)
# correlation between independent vars
cor(df[,c('Tourist_Arrivals', "Marketing_Spend")])
"pacman" %in% rownames(installed.packages())
pacman::p_load(corrplot, modelr, tidyverse, gridExtra, relaimpo)
# Basic scatter plot with base R
p1 <- ggplot(df, aes(x = Marketing_Spend, y = Sales)) +
geom_point(color = "red") +
ggtitle("Sales vs. Marketing Spend") +
theme_minimal() +
theme(
panel.grid.major = element_line(color = "lightgray", linetype = "dotted"),
panel.grid.minor = element_line(color = "lightgray", linetype = "dotted")
)
p1
# Basic scatter plot with base R
p1 <- ggplot(df, aes(x = Marketing_Spend, y = Sales)) +
geom_bar(color = "red") +
ggtitle("Sales vs. Marketing Spend") +
theme_minimal() +
theme(
panel.grid.major = element_line(color = "lightgray", linetype = "dotted"),
panel.grid.minor = element_line(color = "lightgray", linetype = "dotted")
)
p1
# Basic scatter plot with base R
p1 <- ggplot(df, aes(x = Marketing_Spend, y = Sales)) +
geom_point(color = "red") +
ggtitle("Sales vs. Marketing Spend") +
theme_minimal() +
theme(
panel.grid.major = element_line(color = "lightgray", linetype = "dotted"),
panel.grid.minor = element_line(color = "lightgray", linetype = "dotted")
)
p1
p1 <- ggplot(df, aes(x = Marketing_Spend, y = Sales)) +
geom_bar() +
ggtitle("Sales vs Marketing") +
theme_minimal() +
theme(
panel.grid.major = element_line(color = "lightgray", linetype = "dotted"),
panel.grid.minor = element_line(color = "lightgray", linetype = "dotted")
)
p1
p1 <- ggplot(df, aes(x = Marketing_Spend, y = Sales)) +
geom_point(color = "pink") +
ggtitle("Sales vs Marketing") +
theme_minimal() +
theme(
panel.grid.major = element_line(color = "lightgray", linetype = "dotted"),
panel.grid.minor = element_line(color = "lightgray", linetype = "dotted")
)
p1
p1 <- ggplot(df, aes(x = Marketing_Spend, y = Sales)) +
geom_point(color = "gold") +
ggtitle("Sales vs Marketing") +
theme_minimal() +
theme(
panel.grid.major = element_line(color = "lightgray", linetype = "dotted"),
panel.grid.minor = element_line(color = "lightgray", linetype = "dotted")
)
p1
p1 <- ggplot(df, aes(x = Marketing_Spend, y = Sales)) +
geom_point(color = "#000") +
ggtitle("Sales vs Marketing") +
theme_minimal() +
theme(
panel.grid.major = element_line(color = "lightgray", linetype = "dotted"),
panel.grid.minor = element_line(color = "lightgray", linetype = "dotted")
)
p1
# Basic scatter plot with base R
p1 <- ggplot(df, aes(x = Marketing_Spend, y = Sales)) +
geom_point(color = "darkred") +
ggtitle("Sales vs. Marketing Spend") +
theme_minimal() +
theme(
panel.grid.major = element_line(color = "lightgray", linetype = "dotted"),
panel.grid.minor = element_line(color = "lightgray", linetype = "dotted")
)
p1
p2 <- ggplot(df, aes(x = Tourist_Arrivals, y = Sales)) +
geom_point(color="darkgreen") +
theme_minimal() +
theme(
panel.grid.major = element_line(color = "black", linetype = "dotted"),
panel.grid.minor = element_line(color = "gray", linetype = "solid")
)
p2
p2 <- ggplot(df, aes(x = Tourist_Arrivals, y = Sales)) +
geom_point(color="darkgreen") +
theme_minimal() +
theme(
panel.grid.major = element_line(color = "black", linetype = "dashed"),
panel.grid.minor = element_line(color = "gray", linetype = "solid")
)
p2
p2 <- ggplot(df, aes(x = Tourist_Arrivals, y = Sales)) +
geom_point(color="lightred") +
theme_minimal() +
theme(
panel.grid.major = element_line(color = "black", linetype = "dashed"),
panel.grid.minor = element_line(color = "gray", linetype = "solid")
)
p2
p2 <- ggplot(df, aes(x = Tourist_Arrivals, y = Sales)) +
geom_point(color="lightpink") +
theme_minimal() +
theme(
panel.grid.major = element_line(color = "black", linetype = "dashed"),
panel.grid.minor = element_line(color = "gray", linetype = "solid")
)
p2
p2 <- ggplot(df, aes(x = Tourist_Arrivals, y = Sales)) +
geom_point(color="yellow") +
theme_minimal() +
theme(
panel.grid.major = element_line(color = "black", linetype = "dashed"),
panel.grid.minor = element_line(color = "gray", linetype = "solid")
)
p2
p2 <- ggplot(df, aes(x = Tourist_Arrivals, y = Sales)) +
geom_point(color="darkred") +
theme_minimal() +
theme(
panel.grid.major = element_line(color = "black", linetype = "dashed"),
panel.grid.minor = element_line(color = "gray", linetype = "solid")
)
p2
p2
p1
# Basic scatter plot with base R
p2 <- ggplot(df, aes(x = Tourist_Arrivals, y = Sales)) +
geom_point(color = "blue") +
theme_minimal() +
theme(
panel.grid.major = element_line(color = "lightgray", linetype = "dotted"),
panel.grid.minor = element_line(color = "lightgray", linetype = "dotted")
)
p2
p2 <- ggplot(df, aes(x = Tourist_Arrivals, y = Sales)) +
geom_point(color="darkred") +
theme_minimal() +
theme(
panel.grid.major = element_line(color = "lightgray", linetype = "dotted"),
panel.grid.minor = element_line(color = "lightgray", linetype = "dotted")
)
p2
p1
# Sales vs Marketing Spend
p1 <- ggplot(df, aes(x = Marketing_Spend, y = Sales)) +
geom_point(color = "red") +
ggtitle("Sales vs. Marketing Spend") +
theme_minimal() +
theme(
panel.grid.major = element_line(color = "lightgray", linetype = "dotted"),
panel.grid.minor = element_line(color = "lightgray", linetype = "dotted")
)
p2 <- ggplot(df, aes(x= Tourist_Arrivals, y = Sales)) +
geom_point(color = "blue") +
ggtitle("Sales vs. Tourist Arrivals") +
theme_minimal() +
theme(
panel.grid.major = element_line(color = "lightgray", linetype = "dotted"),
panel.grid.minor = element_line(color = "lightgray", linetype = "dotted")
)
p1; p2
p1
p2
grid.arrange(p1, p2, ncol = 2)
grid.arrange(p1, p2, ncol = 3)
grid.arrange(p1, p2, ncol = 1)
grid.arrange(p1, p2, nrow = 2)
grid.arrange(p1, p2)
grid.arrange(p1, p2, nrow = 2)
# Combine the two plots side by side
grid.arrange(p1, p2, ncol = 2)
p3 <- ggplot(df, aes(x=Tourist_Arrivals, y=Sales)) +
geom_point()
p3
p3 <- ggplot(df, aes(x=Tourist_Arrivals, y=Sales)) +
geom_point() +
theme_minimal()
p3
p3 <- ggplot(df, aes(x=Tourist_Arrivals, y=Sales)) +
geom_point() +
theme(
panel.grid.major = element_line(color = "lightgray", linetype = "dotted")
)
p3
p3 <- ggplot(df, aes(x=Tourist_Arrivals, y=Sales)) +
geom_point()
p3
p3 <- ggplot(df, aes(x=Tourist_Arrivals, y=Sales)) +
geom_point(color="pink")
p3
p3 <- ggplot(df, aes(x=Tourist_Arrivals, y=Sales)) +
geom_point(color="darkblue")
p3
p4 <- ggplot(df, aes(x=Marketing_Spend, y=Sales)) +
geom_point(color="red")
p4
grid.arrange(p3,p4,ncol=2)
cor(df[,c('Tourist_Arrivals', 'Marketing_Spend')])
# plotting correlations
corrplot(
cor(df[, sapply(df, is.numeric)], use="complete.obs"),
method = "number",
type='lower'
)
corrplot(
cor(df[,sapply(df, is.numeric)] use = "complete.obs"),
corrplot(
cor(df[,sapply(df, is.numeric)], use = "complete.obs"),
method = "circle"
)
corrplot(
cor(df[,sapply(df, is.numeric)], use = "complete.obs"),
method = "ellipse"
)
corrplot(
cor(df[,sapply(df, is.numeric)], use = "complete.obs"),
method = "pie"
)
corrplot(
cor(df[,sapply(df, is.numeric)], use = "complete.obs"),
method = "square"
)
corrplot(
cor(df[,sapply(df, is.numeric)], use = "complete.obs"),
method = "shade"
)
corrplot(
cor(df[,sapply(df, is.numeric)], use = "complete.obs"),
method = "color"
)
corrplot(
cor(df[,sapply(df, is.numeric)], use = "complete.obs"),
method = "number"
)
names(df)
m1 <- lm(Sales ~ Marketing_Spend, data = df)
summary(m1)
# All-in-one diagnostic plots
par(mfrow = c(2, 2))
plot(model)
# R Code: Complete Assumption Check
model <- lm(Sales ~ Marketing_Spend, data = df)
# All-in-one diagnostic plots
par(mfrow = c(2, 2))
plot(model)
par(mfrow = c(1, 1))
library(lmtest)
library(lmtest)
bptest(model) # Breusch-Pagan test for homoscedasticity
shapiro.test(residuals(model)) # Shapiro-Wilk test for normality
bptest(model) # Breusch-Pagan test for homoscedasticity (constant variance, constant residuals / errors ) H0, H1 is heteroscedastic
dwtest(model) # Durbin-Watson test for independence
# More than one predictor
# build MLR
model2 <- lm(Sales ~ Marketing_Spend + Tourist_Arrivals, data = df)
summary(model2)
# build SLR
model1 <- lm(Sales ~ Marketing_Spend, data = df)
summary(model1)
# More than one predictor
# build MLR
model2 <- lm(Sales ~ Marketing_Spend + Tourist_Arrivals, data = df)
summary(model2)
# build SLR
model1 <- lm(Sales ~ Marketing_Spend, data = df)
summary(model1)
# extracting some more info from the model object
# 1. Add predicted values to original data frame - one way
df <- df %>%
add_predictions(model2)
# 2. add residuals to original data frame - one way
df <- df %>%
add_residuals(model2)
# Plot residues; random residue with no pattern is better!
ggplot(df, aes(pred, resid)) +
geom_point() +
geom_ref_line(h = 0)
df
# Plot residues; random residue with no pattern is better!
ggplot(df, aes(pred, resid)) +
geom_point() +
geom_ref_line(h = 0)
# 3. RSqr. and Adj-RSqr.
summary(model2)$adj.r.squared
summary(model2)$r.squared
# Diagnostic plots for MLR
par(mfrow = c(2, 2))
plot(model2)
par(mfrow = c(1, 1))
# Formal tests
bptest(model2) # Breusch-Pagan test for homoscedasticity
shapiro.test(residuals(model2)) # Shapiro-Wilk test for normality
dwtest(model2) # Durbin-Watson test for independence
